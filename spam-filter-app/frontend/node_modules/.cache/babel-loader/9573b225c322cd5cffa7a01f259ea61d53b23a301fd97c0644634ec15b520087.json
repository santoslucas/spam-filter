{"ast":null,"code":"var _jsxFileName = \"C:\\\\ProgramasCEFET\\\\IC\\\\spam-filter\\\\spam-filter-app\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [emails, setEmails] = useState([]);\n\n  // Carrega os e-mails ao iniciar\n  useEffect(() => {\n    axios.get('http://127.0.0.1:5000/emails').then(response => {\n      setEmails(response.data);\n    }).catch(error => {\n      console.error(\"Erro ao carregar e-mails:\", error);\n    });\n  }, []);\n\n  // Função para verificar se um e-mail é spam\n  const handleCheckSpam = async (emailId, emailText, actualLabel) => {\n    try {\n      const response = await axios.post('http://127.0.0.1:5000/classificar', {\n        corpo_email: emailText // Corrigido para enviar o texto do e-mail\n      });\n      const isSpam = response.data.resultado; // Corrigido para acessar o campo correto\n      console.log(\"label\", actualLabel);\n      console.log(\"isSpam\", isSpam);\n      // Verifica se a previsão foi correta\n      const isCorrect = isSpam && actualLabel === 1 || !isSpam && actualLabel === 0;\n\n      // Atualiza apenas o e-mail específico\n      setEmails(prevEmails => prevEmails.map(email => email.id === emailId ? {\n        ...email,\n        is_spam: isSpam,\n        is_correct: isCorrect,\n        prediction: isSpam ? 'Spam' : 'Não é Spam'\n      } : email));\n    } catch (error) {\n      console.error(\"Erro ao verificar spam:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Detector de Spam\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content\",\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Spam\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"E-mail\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"A\\xE7\\xE3o\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Previs\\xE3o\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Acerto\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: emails.map(email => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: email.id\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: email.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => handleCheckSpam(email.id, email.text, email.label),\n                children: \"Verificar Spam\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 66,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: email.prediction && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: email.prediction === 'Spam' ? 'spam' : 'ham',\n                children: email.prediction\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 72,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: email.is_correct !== undefined && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: email.is_correct ? 'correct' : 'incorrect',\n                children: email.is_correct ? '✔️ Correto' : '❌ Errado'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 79,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 17\n            }, this)]\n          }, email.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Pz1emXvf1o2teMcG4tW42BuWti4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","axios","jsxDEV","_jsxDEV","App","_s","emails","setEmails","get","then","response","data","catch","error","console","handleCheckSpam","emailId","emailText","actualLabel","post","corpo_email","isSpam","resultado","log","isCorrect","prevEmails","map","email","id","is_spam","is_correct","prediction","className","children","fileName","_jsxFileName","lineNumber","columnNumber","text","onClick","label","undefined","_c","$RefreshReg$"],"sources":["C:/ProgramasCEFET/IC/spam-filter/spam-filter-app/frontend/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport './App.css';\n\nfunction App() {\n  const [emails, setEmails] = useState([]);\n\n  // Carrega os e-mails ao iniciar\n  useEffect(() => {\n    axios.get('http://127.0.0.1:5000/emails')\n      .then(response => {\n        setEmails(response.data);\n      })\n      .catch(error => {\n        console.error(\"Erro ao carregar e-mails:\", error);\n      });\n  }, []);\n\n  // Função para verificar se um e-mail é spam\n  const handleCheckSpam = async (emailId, emailText, actualLabel) => {\n    try {\n      const response = await axios.post('http://127.0.0.1:5000/classificar', {\n        corpo_email: emailText, // Corrigido para enviar o texto do e-mail\n      });\n      const isSpam = response.data.resultado; // Corrigido para acessar o campo correto\n      console.log(\"label\" , actualLabel);\n      console.log(\"isSpam\" , isSpam);\n      // Verifica se a previsão foi correta\n      const isCorrect = (isSpam && actualLabel === 1) || (!isSpam && actualLabel === 0);\n\n      // Atualiza apenas o e-mail específico\n      setEmails(prevEmails =>\n        prevEmails.map(email =>\n          email.id === emailId\n            ? { ...email, is_spam: isSpam, is_correct: isCorrect, prediction: isSpam ? 'Spam' : 'Não é Spam' }\n            : email\n        )\n      );\n    } catch (error) {\n      console.error(\"Erro ao verificar spam:\", error);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"header\">\n        <h1>Detector de Spam</h1>\n      </header>\n      <div className=\"content\">\n        <table>\n          <thead>\n            <tr>\n              <th>Spam</th>\n              <th>E-mail</th>\n              <th>Ação</th>\n              <th>Previsão</th>\n              <th>Acerto</th>\n            </tr>\n          </thead>\n          <tbody>\n            {emails.map(email => (\n              <tr key={email.id}>\n                <td>{email.id}</td>\n                <td>{email.text}</td>\n                <td>\n                  <button onClick={() => handleCheckSpam(email.id, email.text, email.label)}>\n                    Verificar Spam\n                  </button>\n                </td>\n                <td>\n                  {email.prediction && (\n                    <span className={email.prediction === 'Spam' ? 'spam' : 'ham'}>\n                      {email.prediction}\n                    </span>\n                  )}\n                </td>\n                <td>\n                  {email.is_correct !== undefined && (\n                    <span className={email.is_correct ? 'correct' : 'incorrect'}>\n                      {email.is_correct ? '✔️ Correto' : '❌ Errado'}\n                    </span>\n                  )}\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}